// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]
  createdAt     DateTime      @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AnonymousRequest {
  id        String   @id @default(cuid())
  ipAddress String
  count     Int      @default(1)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ipAddress])
}

model ChatSession {
  id        String    @id @default(cuid())
  title     String
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id           String       @id @default(cuid())
  session      ChatSession? @relation(fields: [sessionId], references: [id])
  sessionId    String? // Nullable for anonymous messages
  role         String // "user" | "assistant"
  content      String
  isAnonymous  Boolean      @default(false)
  ipAddress    String? // For anonymous users
  userAgent    String? // Browser info
  responseType String? // "ai" | "common" | "redirect"
  category     String? // Career category (resume, interview, etc.)
  createdAt    DateTime     @default(now())

  @@index([isAnonymous, createdAt])
  @@index([ipAddress, createdAt])
}
